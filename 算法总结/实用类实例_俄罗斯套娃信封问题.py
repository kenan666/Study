'''
给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。
当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

说明:
不允许旋转信封。

示例:

输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出: 3 
解释: 最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。

'''
'''
要求小信封可以装入大信封的条件是“小信封宽和高分别严格小于大信封的宽和高”。

当“宽”（下图粉红色）相等的时候，如果“高度”（下图蓝色）出现“上升子序列”就有可能引入错误的结果。例如：

1 3   3 5   6 7   6 8   8 4   9 5

此时，左边粉红色宽度按照升序排序，但是第 3 个和第 4 个，在宽相等的时候，[6, 7] 和 [6, 8] 会被算法同时选取，
就违背了题意（小信封的宽度和高度分别“严格”小于大信封的宽度和高度）。

解决的办法:在宽度相等的时候，让高度不能出现“上升的子序列”。
即首先按照宽度“升序排序”，在宽度相等的时候，按照高度“降序排序”，这样就能保证宽度相等的信封，最多只能选一个，这种策略保证了结果的正确性。

'''
def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
    size = len(envelopes)
    # 特判
    if size < 2:
        return size

    # 对第一列排序，按照宽度排序
    # 【特别注意】当宽度相等的时候，按照高度降序排序
    # 以避免 [[11, 3], [12, 4], [12, 5], [12, 6], [14, 6]] 这种情况发生
    # 正确排序 [[11, 3], [12, 6], [12, 5], [12, 4], [14, 6]]

    envelopes.sort(key=lambda x: (x[0], -x[1]))
    # print(envelopes)
    
    tail = [envelopes[0][1]]

    for i in range(1, size):
        target = envelopes[i][1]
        if target > tail[-1]:
            tail.append(target)
            continue

        left = 0
        right = len(tail) - 1

        while left < right:
            mid = (left + right) >> 1
            if tail[mid] < target:
                left = mid + 1
            else:
                right = mid
        tail[left] = target
    # print(tail)
    return len(tail)

