'''
题目：二叉树的下一个节点

题目描述：给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
'''
'''
下一个节点定义：如果一个节点有右子树，那么它的下一个节点就是它的右子树中的最左子节点
                                           ---------------------------------
                                                                ------------

----> 所以，从右子节点出发一直沿着指向左子节点的指针，就能够找到它的下一个节点。
                                        a
                                    /       \
                                    b        c
                                /     \    /    \
                               d      e   f     g
                                    /   \ 
                                    h   i

--->  b   的下一节点  h
--->  a   的下一节点  f

如果没有右子树，如果节点是它父节点的左子节点，那么它的下一节点就是它的父亲节点。
---> d 的下一节点 b
---> f 的下一节点 c

如果一个节点既没有右子树，并且它还是父节点的右子节点，
**  此时可以沿着指向父节点的指针一直向上遍历，知道找到一个他父节点的左子节点的节点。 如果节点存在，那么这个节点的父节点就是我们要找的下一节点。

---> i 的下一节点 ----》首先到达 e  --  e 是它父节点 b 的右子节点，---》 继续向上遍历到 b -- b 是它父节点 a 的左子节点
**---》所以 b 就是 i 的下一节点

---> g 的下一节点  ---》首先到达 c --- c 为父节点 a 的右子节点 ---》 继续向上遍历 到 a --- a 为根节点 ---  没有父节点 
**---》所以 g 没有下一节点

'''
def getNext(pNode):
    if not pNode:
        return False
    # 如果该节点有右子树，那么下一节点就是它右子树中的最左子节点
    elif pNode.right != None:
        pNode = pNode.right 
        while pNode.left != None:
            pNode = pNode.left
        return pNode
    
    #如果一个节点没有右子树，并且它还是父节点的右子节点
    elif pNode.next != None and pNode.right == pNode:
        while pNode.next != None and pNode.next.left != pNode:
            pNode = pNode.next
        return pNode.next

    # 如果一个节点是它父节点的左子节点，那么直接返回它的父节点
    else:
        return pNode.next